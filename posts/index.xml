<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on yafeiaa Blogs</title>
    <link>https://yafeiaa.github.io/posts/</link>
    <description>Recent content in Posts on yafeiaa Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Oct 2024 16:19:00 +0800</lastBuildDate>
    <atom:link href="https://yafeiaa.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC的负载均衡和服务发现</title>
      <link>https://yafeiaa.github.io/posts/etcd%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</link>
      <pubDate>Thu, 31 Oct 2024 16:19:00 +0800</pubDate>
      <guid>https://yafeiaa.github.io/posts/etcd%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;要实现一个分布式服务注册中心&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC的负载均衡和服务发现</title>
      <link>https://yafeiaa.github.io/posts/grpc%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</link>
      <pubDate>Fri, 27 Sep 2024 14:22:00 +0800</pubDate>
      <guid>https://yafeiaa.github.io/posts/grpc%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;在分布式系统中，grpc越来越受欢迎，被广泛用于微服务和C/S间的通信协议。本文介绍笔者在使用gRPC的过程中的一些想法和遇到的问题。&lt;/p&gt;&#xA;&lt;p&gt;目录：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;grpc需要特别关注负载均衡&lt;/li&gt;&#xA;&lt;li&gt;常用的grpc服务发现实现方式&lt;/li&gt;&#xA;&lt;li&gt;为什么需要服务网格&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;grpc需要特别关注负载均衡&#34;&gt;grpc需要特别关注负载均衡&lt;/h2&gt;&#xA;&lt;p&gt;负载均衡通常从实现方式上分为：&lt;code&gt;服务端负载均衡&lt;/code&gt;和&lt;code&gt;客户端负载均衡&lt;/code&gt;。在http/1.x协议中，我们一般都无脑采用服务端负载均衡，除非有什么特殊的用途。但是在http/2以及基于http/2的gRPC协议中，我们就需要进行特别的考虑。&lt;/p&gt;&#xA;&lt;h3 id=&#34;http2&#34;&gt;http2&lt;/h3&gt;&#xA;&lt;p&gt;为了更加深入的了解，我们从http2开始说起。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python| Drf常用view解析</title>
      <link>https://yafeiaa.github.io/posts/drf%E5%B8%B8%E8%A7%81%E8%A7%86%E5%9B%BE%E5%89%96%E6%9E%90/</link>
      <pubDate>Wed, 01 Dec 2021 12:11:15 +0800</pubDate>
      <guid>https://yafeiaa.github.io/posts/drf%E5%B8%B8%E8%A7%81%E8%A7%86%E5%9B%BE%E5%89%96%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;image/image_eL4tGCOeJs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-apiview&#34;&gt;1 APIView&lt;/h2&gt;&#xA;&lt;p&gt;drf提供了一个继承自View类的APIView类，它比View多了一些好用的方法。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;由APIView来对请求对象进行再次封装，将django的HttpRequest变为drf的Request&lt;/li&gt;&#xA;&lt;li&gt;返回Response而不是HttpResponse&lt;/li&gt;&#xA;&lt;li&gt;捕获所有的APIException并进行响应&lt;/li&gt;&#xA;&lt;li&gt;传入的请求通过APIView来进行认证、权限验证等操作&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;11-apiview的aop&#34;&gt;1.1 APIView的AOP&lt;/h3&gt;&#xA;&lt;p&gt;APIView保持了View的特性，dispatch方法在APIView里也存在，它按照不同的请求方法将请求分发至某个函数来处理。&lt;/p&gt;&#xA;&lt;p&gt;继承自APIView的视图可以设置很多AOP(类属性)来进行认证、权限、频率、渲染等控制。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;.render_classes：设置渲染器&lt;/li&gt;&#xA;&lt;li&gt;.parser_classes：设置解析器&lt;/li&gt;&#xA;&lt;li&gt;.authentication_classes：设置认证器&lt;/li&gt;&#xA;&lt;li&gt;.throttle_classes：设置频率控制器&lt;/li&gt;&#xA;&lt;li&gt;.permission_classes：设置权限控制器&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;12-策略方法&#34;&gt;1.2 策略方法&lt;/h3&gt;&#xA;&lt;p&gt;APIView也提供了一些策略方法：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;.get_renderers(self)&lt;/li&gt;&#xA;&lt;li&gt;.get_parsers(self)&lt;/li&gt;&#xA;&lt;li&gt;.get_authenticators(self)&lt;/li&gt;&#xA;&lt;li&gt;.get_throttles(self)&lt;/li&gt;&#xA;&lt;li&gt;.get_permissions(self)&lt;/li&gt;&#xA;&lt;li&gt;.get_content_negotiator(self)&lt;/li&gt;&#xA;&lt;li&gt;.get_exception_handler(self)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;这些策略方法会返回解析器、渲染器、频率控制器、权限控制器这些AOP的可调用对象列表：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_renderers&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Instantiates and returns the list of renderers that this view can use.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [renderer() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; renderer &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;renderer_classes]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_parsers&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Instantiates and returns the list of parsers that this view can use.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [parser() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; parser &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parser_classes]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_authenticators&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Instantiates and returns the list of authenticators that this view can use.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [auth() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; auth &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;authentication_classes]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_permissions&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Instantiates and returns the list of permissions that this view requires.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [permission() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; permission &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;permission_classes]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_throttles&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Instantiates and returns the list of throttles that this view uses.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [throttle() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; throttle &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;throttle_classes]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;13-控制策略实现&#34;&gt;1.3 控制策略实现&lt;/h3&gt;&#xA;&lt;p&gt;APIView如何实现权限、频率控制呢?在APIView内部实现了一些方法，在request分派到具体的处理方法（get、post）之前，它会自动调用一些策略进行验证：&lt;/p&gt;</description>
    </item>
    <item>
      <title>读书｜vue.js快跑</title>
      <link>https://yafeiaa.github.io/posts/vue.js%E5%BF%AB%E8%B7%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 05 Jul 2021 20:14:45 +0800</pubDate>
      <guid>https://yafeiaa.github.io/posts/vue.js%E5%BF%AB%E8%B7%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yafeiaa.github.io/image/image_NY2X1a4XEO.png&#34; alt=&#34;&#34;&gt;&#xA;vue.js，一个渐进式JavaScript框架，借助其优秀的响应式设计，提供了简单的数据状态到视图状态的双向映射。从原生js到jqury，react····，框架设计者们都在探索视图和数据之间的松耦合，以至于可以直接通过改变数据来改变视图。vue是在众多探索者中的一个把view和state之间的关系处理的恰到好处的渐进式框架。&lt;/p&gt;&#xA;&lt;p&gt;为什么说它是渐进式呢？&lt;/p&gt;&#xA;&lt;p&gt;其实vue的核心功能就是前面说到的：提供一个简单的数据状态到视图状态到双向映射，它更像是一个视图引擎，帮助开发者消除数据与视图之间的高耦合。在vue官网中，把这个功能称为——“声明式渲染”。&lt;/p&gt;&#xA;&lt;p&gt;在vue生态中，我们可以通过添加组件系统，客户端路由，大规模状态管理，构建工具来让vue从一个“声明式渲染”引擎变为一个真正意义上的客户端开发框架，所以vue是“渐进式”的js框架（至少我是这么认为的，如果你有不同看法，洗耳恭听😄）。&lt;/p&gt;&#xA;&lt;p&gt;这篇文章笔者准备围绕vue的核心功能——声明式渲染来介绍vue的入门级单文件用法，后面再结合组件系统，vuex，vue-router，webpack/vite等来介绍vue等工程化用法。&lt;/p&gt;&#xA;&lt;h3 id=&#34;感受声明式渲染&#34;&gt;感受声明式渲染&lt;/h3&gt;&#xA;&lt;p&gt;我们前面提到，vue的核心就是它的声明式渲染，帮我们做好数据状态到视图状态的双向映射。&lt;/p&gt;&#xA;&lt;p&gt;在《vue.js快跑》一书中，用模版、指令、数据解释了vue的组成部分，通过这些组成部分可以实现vue的声明式渲染（这里我们暂且不讨论原理）：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;为正常的HTML添加特殊的属性——被称作指令——借助它来告诉vue我们想要实现的效果以及如何处理提供给它的数据。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&#xA;  &amp;lt;button v-on:click=&amp;#34;change_show&amp;#34;&amp;gt;点我一下我就让你好看&amp;lt;/button&amp;gt;&#xA;  &amp;lt;span v-show=&amp;#34;show_word&amp;#34;&amp;gt;好看&amp;lt;/span&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  new Vue({&#xA;    el: &amp;#39;#app&amp;#39;,&#xA;    data: {&#xA;      show_word: false &#xA;    },&#xA;    methods: {&#xA;      change_show:function(){&#xA;        this.show_word = !this.show_word;&#xA;      }&#xA;    }&#xA;  })&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上面的代码模型中。点击“点我一下我就让你好看”之后在页面上就会出现“好看”，在这个过程中，vue帮助我们实现了一个完整的交互和状态响应。&lt;/p&gt;&#xA;&lt;p&gt;如果要使用原生js来实现上面的功能，我们需要考虑每一个实现细节：&lt;/p&gt;&#xA;&lt;p&gt;1、捕获点击动作&lt;/p&gt;&#xA;&lt;p&gt;2、更改状态变量值&lt;/p&gt;&#xA;&lt;p&gt;3、根据改变后的状态变量值来渲染页面&lt;/p&gt;&#xA;&lt;p&gt;而在vue中，我们只需要把一个数据和一个改变数据的方法声明在script中，并且通过vue的指令将两者建立联系，就可以实现”声明一个数据，通过改变数据改变状态”，我们不需要再关注其他的东西，因为这些vue已经帮助我们做好了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;v-if-vs-v-show&#34;&gt;v-if vs v-show&lt;/h3&gt;&#xA;&lt;p&gt;在前面的例子中我们已经了解到vue的声明式渲染大概是一个什么样子的，丰富的vue指令让我们可以更好的让数据和视图进行绑定。我们在前面的“点我一下就让你好看”的例子中使用了v-show这个指令，v-show指令是通过判断一个表达式或者变量的值是否为真来决定模版的渲染逻辑，它的作用有点像if语句。但实际上vue中也有专门的v-if用来控制条件渲染。&lt;/p&gt;&#xA;&lt;p&gt;首先看看这两个指令的作用：&lt;/p&gt;&#xA;&lt;p&gt;1、v-if：如果v-if指令的值为假，那么在渲染dom时，当前的元素就不会被插入dom&lt;/p&gt;&#xA;&lt;p&gt;2、v-show：如果v-show的值为假，那么在显示dom的时候，这个元素不会被显示，它是css级别的控制&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div v-if=&amp;#34;true&amp;#34;&amp;gt;&#xA;  😄&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;div v-if=&amp;#34;false&amp;#34;&amp;gt;&#xA;  👖&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码会被浏览器解析成这样的：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&#xA;  😄&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从这里就可以看到，v-if指令的值为false的元素并不会被加入最终的html中。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div v-show=&amp;#34;true&amp;#34;&amp;gt;&#xA;  😁&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;div v-show=&amp;#34;false&amp;#34;&amp;gt;&#xA;  👌&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;浏览器解析这一段代码之后，它会产生这样的效果：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&#xA;  😁&#xA;&amp;lt;/div&amp;gt;&#xA;&amp;lt;div style=&amp;#34;display:none;&amp;#34;&amp;gt;&#xA;  👌&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;v-show指令的值不管是不是真，这个元素最终都会被加入最终的html中。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
